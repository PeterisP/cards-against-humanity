package com.kaikoda.cah;

import static org.custommonkey.xmlunit.XMLAssert.assertXMLEqual;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.io.File;
import java.io.IOException;
import java.util.TreeMap;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.transform.TransformerException;

import org.apache.commons.io.FileUtils;
import org.custommonkey.xmlunit.XMLUnit;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.w3c.dom.Document;
import org.xml.sax.SAXException;

/**
 * @author Sheila Thomson
 */
public class TestCardGenerator {

	/**
	 * A reusable instance of CardGenerator.
	 */
	private CardGenerator generator;

	/**
	 * A pointer to where the HTML file is expected to be saved.
	 */
	private static File OUTPUT_FILE_HTML = new File(System.getProperty("user.dir") + File.separator + "cards_against_humanity.html");

	/**
	 * A pointer to where the CSS file that accompanies the HTML file is
	 * expected to be saved.
	 */
	private static File OUTPUT_FILE_CSS = new File(System.getProperty("user.dir") + File.separator + "style.css");

	/**
	 * Configure the test environment prior to each test.
	 * 
	 * @throws CardGeneratorConfigurationException if it's not possible to
	 *         construct a usable instance of CardGenerator.
	 */
	@Before
	public void setup() throws CardGeneratorConfigurationException {

		this.generator = new CardGenerator();

		XMLUnit.setIgnoreWhitespace(true);
		XMLUnit.setIgnoreAttributeOrder(true);
		XMLUnit.setIgnoreComments(true);

	}

	/**
	 * Delete files generated by tests and release objects for garbage
	 * collection.
	 */
	@After
	public void tearDown() {

		// Delete the output files.
		TestCardGenerator.OUTPUT_FILE_HTML.delete();
		TestCardGenerator.OUTPUT_FILE_CSS.delete();

		// Release the re-usable instance of CardGenerator.
		this.generator = null;

	}

	/**
	 * Check that it's possible to construct a usable instance of CardGenerator.
	 */
	@Test
	public void testCardGenerator_constructor() {
		assertNotNull(generator);
	}

	/**
	 * Check that it's possible to retrieve the document builder from the card
	 * generator.
	 */
	@Test
	public void testCardGeneratorGetDocumentBuilder() {

		assertTrue(generator.getDocumentBuilder() instanceof DocumentBuilder);

	}

	/**
	 * Check that the Card Generator doesn't fail when params is null.
	 * 
	 * @throws SAXException if an error occurs while building one of the test or
	 *         control documents.
	 * @throws IOException if an error occurs while reading one of the test or
	 *         control documents.
	 * @throws TransformerException is an unrecoverable error occurs during the
	 *         transformation.
	 */
	@Test
	public void testCardGeneratorTranslate_params_null() throws SAXException, IOException, TransformerException {

		// Retrieve the test card data for British CAH.
		Document xml = this.getDocument("/data/test/cards/uk.xml");

		// Build the cards
		Document result = generator.translate(xml, null);

		// Retrieve the control card data for British CAH.
		Document expected = this.getDocument("/data/control/cards/uk.xml");

		// Check that the result is untranslated (as no dictionary has been
		// specified).
		assertXMLEqual(expected, result);

	}

	/**
	 * Check that a null parameter value is ignored.
	 * 
	 * @throws SAXException if an error occurs while building one of the test or
	 *         control documents.
	 * @throws IOException if an error occurs while reading one of the test or
	 *         control documents.
	 * @throws TransformerException is an unrecoverable error occurs during the
	 *         transformation.
	 */
	@Test
	public void testCardGeneratorTranslate_params_nullValue() throws SAXException, IOException, TransformerException {

		// Retrieve the test card data for British CAH.
		Document xml = this.getDocument("/data/test/cards/uk.xml");

		// Build the parameter list
		TreeMap<String, String> params = new TreeMap<String, String>();
		params.put("path-to-dictionary", this.getClass().getResource("/data/control/dictionaries/english.xml").getPath());
		params.put("output-language", null);

		// Build the cards
		Document result = generator.translate(xml, params);

		// Retrieve the control card data for American CAH.
		Document expected = this.getDocument("/data/control/cards/usa.xml");

		// Check that the result is the same cards, translated into American
		// English (which is the default output language).
		assertXMLEqual(expected, result);

	}

	/**
	 * Check that the Card Generator falls back to the default output language
	 * when none other is specified (and an English dictionary is available).
	 * 
	 * @throws SAXException if an error occurs while building one of the test or
	 *         control documents.
	 * @throws IOException if an error occurs while reading one of the test or
	 *         control documents.
	 * @throws TransformerException is an unrecoverable error occurs during the
	 *         transformation.
	 */
	@Test
	public void testCardGeneratorTranslate_params_defaultOutputLangage() throws SAXException, IOException, TransformerException {

		// Retrieve the test card data for British CAH.
		Document xml = this.getDocument("/data/test/cards/uk.xml");

		// Build the parameter list
		TreeMap<String, String> params = new TreeMap<String, String>();
		params.put("path-to-dictionary", this.getClass().getResource("/data/control/dictionaries/english.xml").getPath());

		// Build the cards
		Document result = generator.translate(xml, params);

		// Retrieve the control card data for American CAH.
		Document expected = this.getDocument("/data/control/cards/usa.xml");

		// Check that the result is the same cards, translated into American
		// English (which is the default output language).
		assertXMLEqual(expected, result);

	}

	/**
	 * Check that the Card Generator correctly translates from American to
	 * British English.
	 * 
	 * @throws SAXException if an error occurs while building one of the test or
	 *         control documents.
	 * @throws IOException if an error occurs while reading one of the test or
	 *         control documents.
	 * @throws TransformerException is an unrecoverable error occurs during the
	 *         transformation.
	 */
	@Test
	public void testCardGeneratorTranslate_english() throws SAXException, IOException, TransformerException {

		// Retrieve the test card data for American CAH.
		Document xml = this.getDocument("/data/test/cards/usa.xml");

		// Build the parameter list
		TreeMap<String, String> params = new TreeMap<String, String>();
		params.put("path-to-dictionary", this.getClass().getResource("/data/control/dictionaries/english.xml").getPath());
		params.put("output-language", "en-gb");

		// Build the cards
		Document result = generator.translate(xml, params);

		// Retrieve the test card data for British CAH.
		Document expected = this.getDocument("/data/control/cards/uk.xml");

		// Check that the result is the same cards, translated into British
		// English (which is the default output language).
		assertXMLEqual(expected, result);

	}

	/**
	 * Check that the Card Generator correctly removes duplicates entries in the
	 * card data.
	 * 
	 * @throws SAXException if an error occurs while building one of the test or
	 *         control documents.
	 * @throws IOException if an error occurs while reading one of the test or
	 *         control documents.
	 * @throws TransformerException is an unrecoverable error occurs during the
	 *         transformation.
	 */
	@Test
	public void testCardGeneratorDedupe() throws SAXException, IOException, TransformerException {

		// Retrieve test card data containing multiple decks and duplicate cards
		Document xml = this.getDocument("/data/test/cards/duplicates.xml");

		// Build the cards
		Document result = generator.dedupe(xml);

		// Retrieve test card data that contains the same cards but no
		// duplicates.
		Document expected = this.getDocument("/data/control/cards/no_duplicates.xml");

		// Check that the result is the same cards, but in just two decks and
		// with no duplicates.
		assertXMLEqual(expected, result);

	}

	/**
	 * Check that the HTML version is generated correctly.
	 * 
	 * @throws SAXException if an error occurs while building one of the test or
	 *         control documents.
	 * @throws IOException if an error occurs while reading one of the test or
	 *         control documents.
	 * @throws TransformerException is an unrecoverable error occurs during the
	 *         transformation.
	 */
	@Test
	public void testCardGeneratorToHtml() throws SAXException, IOException, TransformerException {

		// Retrieve test card data containing enough cards for multiple pages of
		// each deck
		Document xml = this.getDocument("/data/test/cards/html5.xml");

		// Build the cards
		String result = generator.toHtml(xml);

		// Retrieve test card data that contains the same cards but no
		// duplicates.
		String expected = FileUtils.readFileToString(this.getFile("/data/control/cards/html5.html"));

		// Check that the result is the same cards, but in just two decks and
		// with no duplicates.
		assertXMLEqual(expected, result);

	}

	/**
	 * Check that the Card Generator correctly saves a file
	 * 
	 * @throws CardGeneratorConfigurationException if it's not possible to
	 *         construct a usable instance of CardGenerator.
	 * @throws SAXException when something goes wrong while building the DOM
	 *         Document.
	 * @throws IOException when something goes wrong while reading or writing to
	 *         the file.
	 */
	@Test
	public void testCardGeneratorMain() throws CardGeneratorConfigurationException, SAXException, IOException {

		File input = this.getFile("/data/test/cards/html5.xml");

		String[] args = new String[] { "-f", input.getAbsolutePath() };
		CardGenerator.main(args);

		// Check that a file has been created where the HTML file is expected.
		assertEquals(true, OUTPUT_FILE_HTML.exists());

		Document expected = this.getDocument("/data/control/cards/html5.html");
		Document result = this.getDocument(OUTPUT_FILE_HTML);
		assertXMLEqual(expected, result);

		// Check that a file has been created where the CSS file is expected.
		assertEquals(true, OUTPUT_FILE_CSS.exists());

	}

	/**
	 * Check that the Card Generator correctly fails to execute if no card data
	 * is supplied.
	 * 
	 * @throws CardGeneratorConfigurationException if it's not possible to
	 *         construct a usable instance of CardGenerator.
	 */
	@Test
	public void testCardGeneratorMain_noCardData() throws CardGeneratorConfigurationException {

		String[] args = new String[0];
		CardGenerator.main(args);

		File result = OUTPUT_FILE_HTML;
		assertEquals(false, result.exists());

	}

	/**
	 * Check that the Card Generator correctly fails to execute if the card data
	 * isn't found.
	 * 
	 * @throws CardGeneratorConfigurationException if it's not possible to
	 *         construct a usable instance of CardGenerator.
	 */
	@Test
	public void testCardGeneratorMain_cardDataNotFound() throws CardGeneratorConfigurationException {

		String[] args = new String[] { "-f", "phantom.xml" };
		CardGenerator.main(args);

		File result = OUTPUT_FILE_HTML;
		assertEquals(false, result.exists());

	}
	
	/**
	 * Check that the Card Generator correctly fails to execute if a path to the card data
	 * isn't supplied.
	 * 
	 * @throws CardGeneratorConfigurationException if it's not possible to
	 *         construct a usable instance of CardGenerator.
	 */
	@Test
	public void testCardGeneratorMain_cardDataNotSupplied() throws CardGeneratorConfigurationException {

		String[] args = new String[] { "-f" };
		CardGenerator.main(args);

		File result = OUTPUT_FILE_HTML;
		assertEquals(false, result.exists());

	}	

	/**
	 * Check that the Card Generator correctly fails to execute if no dictionary
	 * is specified when the dictionary option is supplied as an argument.
	 * 
	 * @throws CardGeneratorConfigurationException if it's not possible to
	 *         construct a usable instance of CardGenerator.
	 */
	@Test
	public void testCardGeneratorMain_dictionaryNotFound() throws CardGeneratorConfigurationException {

		File input = this.getFile("/data/test/cards/html5.xml");

		String[] args = new String[] { "-f", input.getAbsolutePath(), "-d" };
		CardGenerator.main(args);

		File result = OUTPUT_FILE_HTML;
		assertEquals(false, result.exists());

	}

	/**
	 * Check that the Card Generator correctly fails to execute if help is
	 * requested.
	 * 
	 * @throws CardGeneratorConfigurationException if it's not possible to
	 *         construct a usable instance of CardGenerator.
	 */
	@Test
	public void testCardGeneratorMain_help() throws CardGeneratorConfigurationException {

		File input = this.getFile("/data/test/cards/html5.xml");

		String[] args = new String[] { "-f", input.getAbsolutePath(), "-h" };
		CardGenerator.main(args);

		File result = OUTPUT_FILE_HTML;
		assertEquals(false, result.exists());

	}

	/**
	 * Check that the Card Generator correctly translates card data when
	 * generating an HTML file.
	 * 
	 * @throws CardGeneratorConfigurationException if it's not possible to
	 *         construct a usable instance of CardGenerator.
	 * @throws SAXException if an error occurs while building one of the test or
	 *         control documents.
	 * @throws IOException if an error occurs while reading one of the test or
	 *         control documents.
	 */
	@Test
	public void testCardGeneratorMain_translate() throws CardGeneratorConfigurationException, SAXException, IOException {

		File input = this.getFile("/data/test/cards/usa.xml");
		File dictionary = this.getFile("/data/control/dictionaries/english.xml");

		String[] args = new String[] { "-f", input.getAbsolutePath(), "-d", dictionary.getAbsolutePath(), "-l", "en-gb" };
		CardGenerator.main(args);

		// Check that a file has been created where the HTML file is expected.
		assertEquals(true, OUTPUT_FILE_HTML.exists());

		Document expected = this.getDocument("/data/control/cards/uk.html");
		Document result = this.getDocument(OUTPUT_FILE_HTML);
		assertXMLEqual(expected, result);

		// Check that a file has been created where the CSS file is expected.
		assertEquals(true, OUTPUT_FILE_CSS.exists());

	}

	/**
	 * Finds a file that matches the path specified.
	 * 
	 * @param path a potential path to the file sought.
	 * @return the file sought.
	 */
	private File getFile(String path) {
		return new File(this.getClass().getResource(path).getFile());
	}

	/**
	 * Builds a DOM Document from a file at the path specified.
	 * 
	 * @param path a path to a file containing XML.
	 * @return the XML as a DOM Document.
	 * @throws SAXException when something goes wrong while building the DOM
	 *         Document.
	 * @throws IOException when something goes wrong while reading or writing to
	 *         the file.
	 */
	private Document getDocument(String path) throws SAXException, IOException {
		return this.getDocument(this.getFile(path));
	}

	/**
	 * Builds a DOM Document from the file specified.
	 * 
	 * @param input a file containing XML.
	 * @return the XML as a DOM Document.
	 * @throws SAXException when something goes wrong while building the DOM
	 *         Document.
	 * @throws IOException when something goes wrong while reading or writing to
	 *         the file.
	 */
	private Document getDocument(File input) throws SAXException, IOException {

		DocumentBuilder documentBuilder = generator.getDocumentBuilder();
		documentBuilder.reset();

		return documentBuilder.parse(input);
	}

}
